apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.2"

    def API_URL = '"https://www.goodreads.com/"'
    def API_KEY = '"zKxs0huf91EZnEjZNpYg"'
    defaultConfig {
        applicationId "com.example.ajax.myapplication"
        minSdkVersion 17
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    flavorDimensions "paid", "locale"
    productFlavors {
        preprod {
            dimension "paid"
            buildConfigField "Boolean", "Pay", "false"
        }
        prod {
            dimension "paid"
            buildConfigField "Boolean", "Pay", "true"
        }
        us {
            dimension "locale"
            applicationId "com.example.ajax.myapplication.usa"
        }
        china {
            dimension "locale"
            applicationId "com.example.ajax.myapplicaton.china"
        }
    }
    buildTypes {
        debug {
            buildConfigField "String", "API_URL", API_URL
            buildConfigField "String", "API_KEY", API_KEY
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if ((variant.buildType.name == 'debug') && outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "HW_Debug" + defaultConfig.versionName + ".apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }

        release {
            buildConfigField "String", "API_URL", "AnotherURL"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if ((variant.buildType.name == 'release') && outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "HW_Backend_Release" + defaultConfig.versionName + ".apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }

                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.android.support:design:24.2.1'
    compile 'com.google.code.findbugs:jsr305:2.0.1'
    compile 'com.google.code.gson:gson:2.7'
    testCompile 'junit:junit:4.12'
    compile project(':util')
}
